{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "60af8ce3",
   "metadata": {},
   "source": [
    "# [1.1] Intro to Python\n",
    "\n",
    "[Exercises](https://drive.google.com/file/d/10fRGumO6JtNoETCgwtix7flg3YTQ2Gzx/view?usp=sharing) | [Solutions](https://colab.research.google.com/)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c72400b",
   "metadata": {},
   "source": [
    "In this lecture, we will be going through a brief introduction to python and the skills you will be using for the rest of the course. I will first show you how to use these aspects of python, and then give you time to complete a problem set notebook which will apply the topics we just covered."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb263530",
   "metadata": {},
   "source": [
    "## Numbers:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "867599c8",
   "metadata": {},
   "source": [
    "In python, there are different kinds of variables which can be used to store numbers of varying precision. In this section, you will demonstrate your ability to create and assign these variables, display their values, and explain their limitations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ec6397e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create an integer of value 2 with the name x and a float of value 2 with the name y\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c9ee7677",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print the values of x and y\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1cb0921",
   "metadata": {
    "cell_id": "00008-7d0ddc7a-c8d9-4023-ace0-728951636379",
    "deepnote_cell_type": "markdown"
   },
   "source": [
    "## Math Functions (add, subtract, multiply, divide, exponent, mod):"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "536a54a8",
   "metadata": {},
   "source": [
    "In python, there are math functions which you can use to perform both the standard operations you use everyday, and some others. In this section, you will perform these functions using variables you created above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ed755be2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a variable z equal to the sum of x and y.  Print the value of z\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "82075259",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the value of z to equal the value of x subtracted from y.  Print the value of z.  What do you notice about the output?\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "444983fc",
   "metadata": {},
   "source": [
    "As a reminder, when performing operations on floating point numbers, the method which the computer uses to store the values can result in minor variations from expected values. You do not yet need to understand why this is, but it is important to be aware of it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ac26b454",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the value of z to equal x times y.  Print the value of z\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "049199e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the value of z to equal 4 divided by x.  Print the value of z\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c7da485a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the value of z to equal 3 to the third power.  Print the value of z\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a2bce59c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the value of z to equal 7 mod 5.  Print the value of z\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f1698f5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Print the value of 3 divided by x and 3 floor divided by x.  Compare the two outputs\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4b32701",
   "metadata": {},
   "source": [
    "## Booleans (True/False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdc324d6",
   "metadata": {},
   "source": [
    "In python, there are variables called booleans which can have the values true or false. In this section, you will assign boolean variables, check their values, and use them in meaningful ways."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6419b153",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a variable named condition2 and assign it the value False.  Print the value of condition2\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "687042a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Based on the other comparison operators we covered, \n",
    "# how do you think we check if a variable is greater than or equal to another?\n",
    "# You can use the variables x and y from earlier in the notebook in your answer.  \n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "67d9566e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What do you think the output of True or True will be?  Try it\n",
    "\n",
    "# STUDENT CODE HERE\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "60cfd0eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What do you think the output of False or False will be?  Try it\n",
    "\n",
    "# STUDENT CODE HERE\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3eaf5373",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What do you think the output of True and False will be?  Try it\n",
    "\n",
    "# STUDENT CODE HERE\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "800b2619",
   "metadata": {},
   "outputs": [],
   "source": [
    "# When checking if two floating point numbers are equivalent, we cannot use the == operator.  \n",
    "# This is because of the limited precision we saw illustrated in the earlier example.  \n",
    "# Try checking if 0.1 + 0.1 + 0.1 is equal to 0.3\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c617d2d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# There is a function in the math module ofpython which allows us to check \n",
    "# if two floats are close enough in value to be considered equal.  \n",
    "# Hint: the syntax is math.isclose(x, y)\n",
    "\n",
    "import math # We will cover imports later. For now, just notice this line\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51c4cc15",
   "metadata": {},
   "source": [
    "## Types"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b6516dc",
   "metadata": {},
   "source": [
    "Every variable you have worked with so far has been what is called an instance of an object of its corresponding type. For instance, when you created the variable 'x' and made it equal 2, you created an instance of the integer type whose name is 'x' and value is 2. Integers, floats, and booleans are all objects. There are other types of objects as well that we will cover later, and additional types can be created through the code you write.\n",
    "\n",
    "If this seems a bit confusing, that is ok. It will make more sense as we work through this section.\n",
    "In this section, you will be practicing a few methods of checking what type an object is and how that can be useful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "26076930",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What type of object is y?\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8dc2015c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use this function to check if y is an integer\n",
    "\n",
    "# STUDENT CODE HERE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "428366da",
   "metadata": {},
   "source": [
    "The difference between these functions is that type() returns whatever type the object is, but it is not in a very useable format for our code to read.  The isinstance() function only checks if the object is of one specified type, but it returns a boolean (True/False) which we can use to tell our code to perform different actions.  We will cover how to do that next week.  "
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
